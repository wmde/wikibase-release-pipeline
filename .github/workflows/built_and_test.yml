name: Build and test Wikibase and friends

on:
  workflow_dispatch:
    inputs:
      env_file:
        description: 'Environment file'
        required: true
        default: '.env' # only gets set on a "workflow_dispatch" run
  push:

env:
  env_file: ${{ github.event.inputs.env_file || 'versions/wmde3.env' }}

jobs:

  build_wikibase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Cache composer
        uses: actions/cache@v2
        env:
          cache-name: cache-wikibase-composer
        with:
          path: cache
          key: cache-wikibase-composer

      - name: Cache git_cache repos
        uses: actions/cache@v2
        env:
          cache-name: cache-wikibase-git-repo-temp-bump
        with:
          path: git_cache
          key: cache-wikibase-git-repo-temp-bump

      - name: Build Tarball
        run: bash build.sh wikibase ${{ env.env_file }}

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildMetadata
          if-no-files-found: error
          path: artifacts/build_metadata_wikibase.env

      - name: Archive tar production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/Wikibase.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.WIKIBASE_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Archive base docker production artifact
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/wikibase.docker.tar.gz

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.WIKIBASE_IMAGE_NAME }}
          image_tag: latest

  build_wikibase_bundle:
    runs-on: ubuntu-latest
    needs:
      - build_wikibase
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Cache composer
        uses: actions/cache@v2
        env:
          cache-name: cache-wikibase-composer
        with:
          path: cache
          key: cache-wikibase-composer

      - name: Cache git_cache repos
        uses: actions/cache@v2
        env:
          cache-name: cache-wikibase-git-repo-temp-bump
        with:
          path: git_cache
          key: cache-wikibase-git-repo-temp-bump

      - name: Get dependency build artifacts
        uses: actions/download-artifact@v2
        with:
          name: BuildArtifacts
          path: artifacts/

      - name: Build Bundle Docker Image
        run: bash build.sh wikibase_bundle ${{ env.env_file }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.WIKIBASE_BUNDLE_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Archive bundle docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/wikibase-bundle.docker.tar.gz

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildMetadata
          if-no-files-found: error
          path: artifacts/build_metadata_*.env

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.WIKIBASE_BUNDLE_IMAGE_NAME }}
          image_tag: latest

  build_quickstatements:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Build QuickStatements Image 
        id: download_step
        run: bash build.sh quickstatements ${{ env.env_file }}

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildMetadata
          if-no-files-found: error
          path: artifacts/build_metadata_*.env

      - name: Archive docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/quickstatements.docker.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.QUICKSTATEMENTS_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.QUICKSTATEMENTS_IMAGE_NAME }}
          image_tag: latest

  build_wdqs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Cache wdqs service tar
        uses: actions/cache@v2
        env:
          cache-name: cache-wdqs-backend-git-repo
        with:
          path: cache
          key: cache-wdqs-backend-git-repo

      - name: Build WDQS Image 
        id: download_step
        run: bash build.sh wdqs ${{ env.env_file }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.WDQS_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Archive docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/wdqs.docker.tar.gz

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.WDQS_IMAGE_NAME }}
          image_tag: latest

  build_wdqs_proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Build WDQS-proxy image 
        run: bash build.sh wdqs-proxy ${{ env.env_file }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.WDQS_PROXY_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Archive docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: artifacts/wdqs-proxy.docker.tar.gz

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.WDQS_PROXY_IMAGE_NAME }}
          image_tag: latest

  build_wdqs_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Cache git_cache repos
        uses: actions/cache@v2
        env:
          cache-name: cache-wdqs-frontend-git-repo
        with:
          path: git_cache
          key: cache-wdqs-frontend-git-repo

      - name: Build WDQS-frontend
        run: bash build.sh wdqs-frontend ${{ env.env_file }}

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildMetadata
          if-no-files-found: error
          path: artifacts/build_metadata_wdqs_frontend.env

      - name: Archive tar production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: ./artifacts/wdqs-frontend.tar.gz

      - name: Archive docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: ./artifacts/wdqs-frontend.docker.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.WDQS_FRONTEND_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.WDQS_FRONTEND_IMAGE_NAME }}
          image_tag: latest

  build_elasticsearch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: variables.env

      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Build Elasticsearch
        run: bash build.sh elasticsearch ${{ env.env_file }}

      - name: Archive docker production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildArtifacts
          if-no-files-found: error
          path: ./artifacts/elasticsearch.docker.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Store release version docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: ${{ env.ELASTICSEARCH_IMAGE_NAME }}
          tag: ${{ github.run_id }}

      - name: Scan image
        uses: ./.github/actions/scan-image
        with:
          image_name: ${{ env.ELASTICSEARCH_IMAGE_NAME }}
          image_tag: latest

  test_wikibase:
    strategy:
      fail-fast: false
      matrix:
        databaseImageName: [ 'mariadb:10.3' ] # 'mysql:5.6' disabled https://phabricator.wikimedia.org/T296066
        suite: [ 
          repo, 
          fedprops, 
          repo_client, 
          quickstatements, 
          pingback, 
          confirm_edit,
          elasticsearch,

          base__repo,
          base__repo_client,
          base__pingback,
          base__fedprops,
        ]
    needs:
      - build_wikibase_bundle
      - build_wdqs
      - build_elasticsearch
      - build_wdqs_frontend
      - build_wdqs_proxy
      - build_quickstatements
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Get Wikibase docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: BuildArtifacts
          path: artifacts/

      - name: Run Tests - ${{ matrix.suite }}
        env:
          DATABASE_IMAGE_NAME: ${{ matrix.databaseImageName }}
        run: make test SUITE=${{ matrix.suite }}

      - name: Report
        if: always()
        run: |
          cd test/reporter
          npm install
          SUITE=${{ matrix.suite }} node report.js

      - name: Archive docker test artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: TestArtifacts
          path: test/log

  test_upgrade_base:
    strategy:
      fail-fast: false
      matrix:
        version: [
          '1.32-base',
          '1.33-base',
          '1.34-base',
          '1.35-base',
          'latest-base',
          'lts-base',
          'wmde.0',
          'wmde.1'
        ]
    needs:
      - build_wikibase
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Wikibase docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: BuildArtifacts
          path: artifacts/

      - name: Test upgrade version - ${{ matrix.version }}
        run: make test-upgrade VERSION=${{ matrix.version }}

      - name: Archive docker test artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: TestUpgradeArtifacts
          path: test/log

  test_upgrade_bundle:
    strategy:
      fail-fast: false
      matrix:
        version: [
          'wmde.1-bundle'
        ]
    needs:
      - build_wikibase_bundle
    runs-on: ubuntu-latest
    env:
      TARGET_WIKIBASE_UPGRADE_IMAGE_NAME: wikibase-bundle
    steps:
      - uses: actions/checkout@v2
      - name: Get Wikibase docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: BuildArtifacts
          path: artifacts/

      - name: Test upgrade version - ${{ matrix.version }}
        run: make test-upgrade VERSION=${{ matrix.version }}

      - name: Archive docker test artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: TestUpgradeArtifactsBundle
          path: test/log

  test_example:
    runs-on: ubuntu-latest
    env:
      NUM_SERVICES: 9
      LOG_FILE: /tmp/example_test/log/example.log
    steps:
      - uses: actions/checkout@v2

      - name: Test example
        run: bash test/test_example.sh

      - name: Wait for WDQS to start polling wikibase
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 100
          retry_wait_seconds: 5
          warning_on_retry: false
          command: cat ${{ env.LOG_FILE }} | grep "RecentChangesPoller - Got no real changes" | wc -l | grep 5

      - run: docker ps
      - name: Ensure ${{ env.NUM_SERVICES }} services have been created
        run: docker ps --format "{{.ID}}_{{.Names}} {{.Status}}" | wc -l | grep ${{ env.NUM_SERVICES }}
      - name: Ensure ${{ env.NUM_SERVICES }} services are up and running
        run: docker ps --filter "status=running" --format "{{.ID}}_{{.Names}} {{.Status}}" | wc -l | grep ${{ env.NUM_SERVICES }}
      
      - name: Ensure some services respond to requests
        run: |
          curl -L -s -N "http://localhost/" | grep -q "Main Page"
          curl -L -s -N "http://localhost:8834/" | grep  -q "Wikidata_Query_Help"
      
      - name: Ensure job-runner ran recentChangesUpdate
        run: cat ${{ env.LOG_FILE }} | grep "recentChangesUpdate Special:RecentChanges type=cacheUpdate" | wc -l | grep 2

      - name: Output log to terminal
        if: always()
        run: cat ${{ env.LOG_FILE }}
      
      - name: Archive test example artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: TestExampleArtifacts
          if-no-files-found: error
          path: ${{ env.LOG_FILE }}

  versions:
    needs:
      - test_wikibase
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: ${{ env.env_file }}

      - name: Build version requirements
        run: bash build.sh requirements ${{ env.env_file }}

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v2
        with:
          name: BuildMetadata
          if-no-files-found: error
          path: artifacts/built_versions.log
