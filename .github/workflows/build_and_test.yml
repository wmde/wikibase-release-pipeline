name: Build and Test

on:
  push:
    branches:
      - "main"
  pull_request:
    paths-ignore:
      - "docs/**"
      - ".md"

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Lint
        run: make lint

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    needs:
      - lint

    strategy:
      fail-fast: false
      matrix:
        component:
          [
            "wikibase",
            "elasticsearch",
            "wdqs",
            "wdqs-frontend",
            "wdqs-proxy",
            "quickstatements",
          ]

        channel: ["lts", "stable", "next"]

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Prepare environment and caches
        uses: ./.github/actions/prep-env-and-cache
        with:
          env_file: "channels/${{ matrix.channel }}.env"

      - name: Build Artifact
        run: ./build.sh ${{ matrix.component }} "channels/${{ matrix.channel }}.env"
        shell: bash

      - name: Upload Results
        uses: ./.github/actions/upload-results
        with:
          name: ${{ matrix.component }}
          channel: ${{ matrix.channel }}
          github_token: secrets.GITHUB_TOKEN

      # TODO: remove extra step with https://phabricator.wikimedia.org/T347000
      - name: Upload additional bundle results for wikibase build
        if: matrix.component == 'wikibase'
        uses: ./.github/actions/upload-results
        with:
          name: ${{ matrix.component }}-bundle
          channel: ${{ matrix.channel }}
          github_token: secrets.GITHUB_TOKEN

      - name: Scan Image
        uses: ./.github/actions/scan-image
        continue-on-error: true
        with:
          image_name: ${{ matrix.component }}
          channel: ${{ matrix.channel }}

      # TODO: remove extra step with https://phabricator.wikimedia.org/T347000
      - name: Scan additional bundle Image for wikibase builds
        if: matrix.component == 'wikibase'
        uses: ./.github/actions/scan-image
        continue-on-error: true
        with:
          image_name: "${{ matrix.component }}-bundle"
          channel: ${{ matrix.channel }}

  test:
    strategy:
      fail-fast: false
      matrix:
        suite:
          [
            repo,
            fedprops,
            repo_client,
            quickstatements,
            pingback,
            confirm_edit,
            elasticsearch,

            base__repo,
            base__repo_client,
            base__pingback,
            base__fedprops,
          ]

        channel: ["lts", "stable", "next"]

        databaseImageName: [
            # 'mysql:5.6', disabled https://phabricator.wikimedia.org/T296066
            "mariadb:10.9",
          ]

    needs:
      - build

    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - name: Get built Docker artifacts
        uses: actions/download-artifact@v3
        with:
          name: BuildArtifactsDocker-${{ matrix.channel }}
          path: artifacts/

      - name: Test ${{ matrix.suite }}
        env:
          DATABASE_IMAGE_NAME: ${{ matrix.databaseImageName }}
        run: make test SUITE=${{ matrix.suite }}

      - name: Report Selenium
        if: always()
        run: |
          cd .github/reporter
          npm install
          SUITE=${{ matrix.suite }} node report.js

      - name: Show Logs
        if: always()
        continue-on-error: true
        run: |
          ls -lahr test/suites/${{ matrix.suite }}/results test/suites/${{ matrix.suite }}/results/*
          tail -n +1 test/suites/${{ matrix.suite }}/results/*.log

      - name: Archive Docker test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: TestArtifacts-${{ matrix.channel }}
          path: test/suites/**/results

  test_upgrade_base:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        # TODO: can we get this from the environment to not have it hardcoded in the pipeline code?
        version: [
            # Latest 1.37
            "wmde.9",
            # Latest 1.38
            "wmde.10",
          ]

        channel: ["lts", "stable", "next"]

    needs:
      - build

    steps:
      - uses: actions/checkout@v4

      - name: Get built Docker artifacts
        uses: actions/download-artifact@v3
        with:
          name: BuildArtifactsDocker-${{ matrix.channel }}
          path: artifacts/

      - name: Test upgrade from ${{ matrix.version }}
        # This step should only take ~5 mins to complete, but sometimes seems to lock up and use the whole job timeout
        # Set a specific lower timeout to allow us to retry sooner
        timeout-minutes: 10
        run: make test-upgrade VERSION=${{ matrix.version }} TO_VERSION=channels/${{ matrix.channel }}.env

      - name: Show Docker Logs
        if: always()
        run: test/scripts/docker_logs.sh

      # TODO: DRY
      - name: Archive Docker test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: TestArtifacts-${{ matrix.channel }}
          path: test/suites/**/results

  test_upgrade_bundle:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    needs:
      - build

    strategy:
      fail-fast: false
      matrix:
        # TODO: can we get this from the environment to not have it hardcoded in the pipeline code?
        version: [
            # Latest 1.37
            "wmde.9-bundle",
            # Latest 1.38
            "wmde.10-bundle",
          ]

        channel: ["lts", "stable", "next"]

    env:
      TARGET_WIKIBASE_UPGRADE_IMAGE_NAME: wikibase-bundle

    steps:
      - uses: actions/checkout@v4

      - name: Get built Docker artifacts
        uses: actions/download-artifact@v3
        with:
          name: BuildArtifactsDocker-${{ matrix.channel }}
          path: artifacts/

      - name: Test upgrade from ${{ matrix.version }}
        # This step should only take ~5 mins to complete, but sometimes seems to lock up and use the whole job timeout
        # Set a specific lower timeout to allow us to retry sooner
        timeout-minutes: 10
        run: make test-upgrade VERSION=${{ matrix.version }} TO_VERSION=channels/${{ matrix.channel }}.env

      - name: Show Docker Logs
        if: always()
        run: test/scripts/docker_logs.sh

      # TODO: DRY
      - name: Archive Docker test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: TestArtifacts-${{ matrix.channel }}
          path: test/suites/**/results

  metadata:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    needs:
      - test

    strategy:
      fail-fast: false
      matrix:
        channel: ["lts", "stable", "next"]

    steps:
      - uses: actions/checkout@v4

      - uses: c-py/action-dotenv-to-setenv@v4
        with:
          env-file: "channels/${{ matrix.channel }}.env"

      - name: Build version requirements
        shell: bash
        run: |
          ./build.sh requirements "channels/${{ matrix.channel }}.env"
          cp artifacts/built_versions.log artifacts/built_versions-${{ matrix.channel }}.log

      - name: Archive metadata artifacts
        uses: actions/upload-artifact@v3
        with:
          name: BuildMetadata
          path: artifacts/built_versions-${{ matrix.channel }}.log
          if-no-files-found: error

  upload_ghcr:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    needs:
      - test
      - test_upgrade_base
      - test_upgrade_bundle

    strategy:
      fail-fast: false
      matrix:
        component:
          [
            "wikibase",
            "elasticsearch",
            "wdqs",
            "wdqs-frontend",
            "wdqs-proxy",
            "quickstatements",
          ]
        channel: ["lts", "stable", "next"]

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ inputs.github_token }}

      - name: Store built docker image on GHCR
        if: github.ref == 'refs/heads/main'
        uses: wmde/tag-push-ghcr-action@v3
        with:
          image_name: "wikibase/${{ inputs.name }}"
          tag: ${{ github.run_id }}
